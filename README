
File: ex1a.c
Calculating Executable Times of Bubble and Quick Sort
=====================================================================
Written by: Tali Kalev, ID:208629691, Login: talikal
		and	Noga Levy, ID:315260927, Login: levyno

This program receives in the argument vectors, the name of a file and
an integer. The program uses the integer to draw random numbers into
an array of 50000 cells. The parent of the program creates 2 children
via the command fork(). One child sorts the array using bubble sort
while the other uses quick sort. Both children calculate the time it
took them to sort the array and print this result into the file sent
in the argument vector.
The parent repeates this process of creating 2 children that sort the
array 50 times.
At the end of this process, the parent goes over the file in which
the results were printed and calculates the minimum, maximum and average
times for each sorting methods.
The parent prints in the command line these calculations and when it is
finished it prints the time its own executable time.

The average running time for the parent process is: 407.506
Note: We were unable to run for the requested 10 times because
			of issues with the inferno.



Compile: gcc -Wall ex1a.c -o ex1a
Run: ./ex1a <filename> <integer>

Input: When running the executable file, add name of file and integer.
	   Example: ./ex1a filename 17


Output: Average bubble sort time, average quick sort time,
		minimum bubble sort time, minimum quick sort time,
		maximum bubble sort time, maximum bubble sort time,
		Parent sort time.
		Example: 8.232045 8.259982 7.979422 0.012284 8.485131 8.485131
				411.873370



Files: ex1b1.c ex1b2.c exb3.c exb4.c
Shell Commands Running from File
=====================================================================
Written by: Tali Kalev, ID:208629691, Login: talikal
		and	Noga Levy, ID:315260927, Login: levyno

ex1b4.c
This program receives a series of commands from the user. The program
reads these commands and writes them into a file that it receives via
the argument vector. If the user types "history", "echo", or "ps" then
the program runs the matching executable file. The program finishes when
the user inputs "exit" as a command.

ex1b1.c
history command handler
prints the history of the commands -
This program receives via the argument vector the name of a file.
The program then reads line by line the information in the file and
prints it on the screen.

ex1b2.c
echo command handler
print string-
This program receives via the argument vector a string. The program
then prints this string on the screen.

ex1b3.c
ps command handler
print the proccess id-
This program can either receive no arguments via the argument vector or one.
If the program recieves none then it will print the process ID of the current
process. If the program receives an argument (other than the name of the file)
then it will print the process ID of the current and parent process.


Compile: gcc -Wall ex1b1.c -o history
		 gcc -Wall ex1b2.c -o echo
		 gcc -Wall ex1b3.c -o ps
		 gcc -Wall ex1b4.c -o shell

Run: ./shell <filename>

Input: When running the file: ./shell <filename>
		and then a list of commands.
		Example: echo hello
				 exit


Output: The string after echo is printed.
		Example: hello
